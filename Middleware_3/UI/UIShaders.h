/*
 * Copyright (c) 2018 Confetti Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

/*
cbuffer uniformBlockVS : register(b0)
{
	float4 scaleBias;
};

float4 VSMain(float2 position : Position) : SV_POSITION
{
	return float4 (position.xy * scaleBias.xy + scaleBias.zw, 0.0f, 1.0f);
};

cbuffer uniformBlockPS : register(b1)
{
	float4 color;
};

float4 PSMain() : SV_Target
{
	return color;
};
*/

const unsigned char d3d12_builtin_plain_vert[] =
{
	68,  88,  66,  67,  12,  23,
	111,  89,  60, 157,  13, 239,
	221, 180,  63,  18,  46,  79,
	201,  77,   1,   0,   0,   0,
	220,   2,   0,   0,   5,   0,
	0,   0,  52,   0,   0,   0,
	72,   1,   0,   0, 124,   1,
	0,   0, 176,   1,   0,   0,
	64,   2,   0,   0,  82,  68,
	69,  70,  12,   1,   0,   0,
	1,   0,   0,   0, 108,   0,
	0,   0,   1,   0,   0,   0,
	60,   0,   0,   0,   0,   5,
	254, 255,   0, 129,  32,   0,
	228,   0,   0,   0,  82,  68,
	49,  49,  60,   0,   0,   0,
	24,   0,   0,   0,  32,   0,
	0,   0,  40,   0,   0,   0,
	36,   0,   0,   0,  12,   0,
	0,   0,   0,   0,   0,   0,
	92,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   1,   0,
	0,   0, 117, 110, 105, 102,
	111, 114, 109,  66, 108, 111,
	99, 107,  86,  83,   0, 171,
	92,   0,   0,   0,   1,   0,
	0,   0, 132,   0,   0,   0,
	16,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	172,   0,   0,   0,   0,   0,
	0,   0,  16,   0,   0,   0,
	2,   0,   0,   0, 192,   0,
	0,   0,   0,   0,   0,   0,
	255, 255, 255, 255,   0,   0,
	0,   0, 255, 255, 255, 255,
	0,   0,   0,   0, 115,  99,
	97, 108, 101,  66, 105,  97,
	115,   0, 102, 108, 111,  97,
	116,  52,   0, 171, 171, 171,
	1,   0,   3,   0,   1,   0,
	4,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0, 182,   0,   0,   0,
	77, 105,  99, 114, 111, 115,
	111, 102, 116,  32,  40,  82,
	41,  32,  72,  76,  83,  76,
	32,  83, 104,  97, 100, 101,
	114,  32,  67, 111, 109, 112,
	105, 108, 101, 114,  32,  49,
	48,  46,  49,   0,  73,  83,
	71,  78,  44,   0,   0,   0,
	1,   0,   0,   0,   8,   0,
	0,   0,  32,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	0,   0,   0,   0,   3,   3,
	0,   0,  80, 111, 115, 105,
	116, 105, 111, 110,   0, 171,
	171, 171,  79,  83,  71,  78,
	44,   0,   0,   0,   1,   0,
	0,   0,   8,   0,   0,   0,
	32,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	3,   0,   0,   0,   0,   0,
	0,   0,  15,   0,   0,   0,
	83,  86,  95,  80,  79,  83,
	73,  84,  73,  79,  78,   0,
	83,  72,  69,  88, 136,   0,
	0,   0,  80,   0,   1,   0,
	34,   0,   0,   0, 106,   8,
	0,   1,  89,   0,   0,   4,
	70, 142,  32,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	95,   0,   0,   3,  50,  16,
	16,   0,   0,   0,   0,   0,
	103,   0,   0,   4, 242,  32,
	16,   0,   0,   0,   0,   0,
	1,   0,   0,   0,  50,   0,
	0,  11,  50,  32,  16,   0,
	0,   0,   0,   0,  70,  16,
	16,   0,   0,   0,   0,   0,
	70, 128,  32,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	230, 138,  32,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	54,   0,   0,   8, 194,  32,
	16,   0,   0,   0,   0,   0,
	2,  64,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	128,  63,  62,   0,   0,   1,
	83,  84,  65,  84, 148,   0,
	0,   0,   3,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   2,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0
};

const unsigned char d3d12_builtin_plain_frag[] =
{
	68,  88,  66,  67,  51, 213,
	219, 141, 150, 247, 181, 139,
	117,  53, 231,  49, 120, 162,
	133,  24,   1,   0,   0,   0,
	112,   2,   0,   0,   5,   0,
	0,   0,  52,   0,   0,   0,
	68,   1,   0,   0,  84,   1,
	0,   0, 136,   1,   0,   0,
	212,   1,   0,   0,  82,  68,
	69,  70,   8,   1,   0,   0,
	1,   0,   0,   0, 108,   0,
	0,   0,   1,   0,   0,   0,
	60,   0,   0,   0,   0,   5,
	255, 255,   0, 129,  32,   0,
	224,   0,   0,   0,  82,  68,
	49,  49,  60,   0,   0,   0,
	24,   0,   0,   0,  32,   0,
	0,   0,  40,   0,   0,   0,
	36,   0,   0,   0,  12,   0,
	0,   0,   0,   0,   0,   0,
	92,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	1,   0,   0,   0,   1,   0,
	0,   0, 117, 110, 105, 102,
	111, 114, 109,  66, 108, 111,
	99, 107,  80,  83,   0, 171,
	92,   0,   0,   0,   1,   0,
	0,   0, 132,   0,   0,   0,
	16,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	172,   0,   0,   0,   0,   0,
	0,   0,  16,   0,   0,   0,
	2,   0,   0,   0, 188,   0,
	0,   0,   0,   0,   0,   0,
	255, 255, 255, 255,   0,   0,
	0,   0, 255, 255, 255, 255,
	0,   0,   0,   0,  99, 111,
	108, 111, 114,   0, 102, 108,
	111,  97, 116,  52,   0, 171,
	171, 171,   1,   0,   3,   0,
	1,   0,   4,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0, 178,   0,
	0,   0,  77, 105,  99, 114,
	111, 115, 111, 102, 116,  32,
	40,  82,  41,  32,  72,  76,
	83,  76,  32,  83, 104,  97,
	100, 101, 114,  32,  67, 111,
	109, 112, 105, 108, 101, 114,
	32,  49,  48,  46,  49,   0,
	73,  83,  71,  78,   8,   0,
	0,   0,   0,   0,   0,   0,
	8,   0,   0,   0,  79,  83,
	71,  78,  44,   0,   0,   0,
	1,   0,   0,   0,   8,   0,
	0,   0,  32,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	0,   0,   0,   0,  15,   0,
	0,   0,  83,  86,  95,  84,
	97, 114, 103, 101, 116,   0,
	171, 171,  83,  72,  69,  88,
	68,   0,   0,   0,  80,   0,
	0,   0,  17,   0,   0,   0,
	106,   8,   0,   1,  89,   0,
	0,   4,  70, 142,  32,   0,
	1,   0,   0,   0,   1,   0,
	0,   0, 101,   0,   0,   3,
	242,  32,  16,   0,   0,   0,
	0,   0,  54,   0,   0,   6,
	242,  32,  16,   0,   0,   0,
	0,   0,  70, 142,  32,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,  62,   0,   0,   1,
	83,  84,  65,  84, 148,   0,
	0,   0,   2,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0
};
/************************************************************************/
/************************************************************************/
/*
struct VsIn
{
	float2 position: Position;
	float2 texCoord: TEXCOORD0;
};

struct PsIn
{
	float4 position: SV_Position;
	float2 texCoord: TEXCOORD0;
	float4 ScaledTexCoord: TEXCOORD1;
};

cbuffer uniformBlockVS : register(b0)
{
	float4 scaleBias;
	float2 TextureSize;
};

PsIn VSMain(VsIn In)
{
	PsIn Out;
	Out.position = float4 (In.position, 0.0f, 1.0f);
	Out.ScaledTexCoord.xy = In.texCoord * TextureSize;
	Out.position.xy = Out.position.xy * scaleBias.xy + scaleBias.zw;
	Out.texCoord = In.texCoord;
	return Out;
};

Texture2D uTex0 : register(t2);
SamplerState uSampler0 : register(s3);

cbuffer uniformBlockPS : register(b1)
{
	float4 color;
};

float4 PSMain(PsIn In) : SV_Target
{
    return uTex0.Sample(uSampler0, In.texCoord) * color;
}
*/
const unsigned char d3d12_builtin_textured_vert[] =
{
	68,  88,  66,  67,   9,   4,
	29, 164,  38, 222, 209, 208,
	156, 136, 117,  68, 204, 203,
	162, 113,   1,   0,   0,   0,
	240,   3,   0,   0,   5,   0,
	0,   0,  52,   0,   0,   0,
	168,   1,   0,   0, 252,   1,
	0,   0, 108,   2,   0,   0,
	84,   3,   0,   0,  82,  68,
	69,  70, 108,   1,   0,   0,
	1,   0,   0,   0, 108,   0,
	0,   0,   1,   0,   0,   0,
	60,   0,   0,   0,   0,   5,
	254, 255,   0, 129,  32,   0,
	68,   1,   0,   0,  82,  68,
	49,  49,  60,   0,   0,   0,
	24,   0,   0,   0,  32,   0,
	0,   0,  40,   0,   0,   0,
	36,   0,   0,   0,  12,   0,
	0,   0,   0,   0,   0,   0,
	92,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   1,   0,
	0,   0, 117, 110, 105, 102,
	111, 114, 109,  66, 108, 111,
	99, 107,  86,  83,   0, 171,
	92,   0,   0,   0,   2,   0,
	0,   0, 132,   0,   0,   0,
	32,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	212,   0,   0,   0,   0,   0,
	0,   0,  16,   0,   0,   0,
	2,   0,   0,   0, 232,   0,
	0,   0,   0,   0,   0,   0,
	255, 255, 255, 255,   0,   0,
	0,   0, 255, 255, 255, 255,
	0,   0,   0,   0,  12,   1,
	0,   0,  16,   0,   0,   0,
	8,   0,   0,   0,   2,   0,
	0,   0,  32,   1,   0,   0,
	0,   0,   0,   0, 255, 255,
	255, 255,   0,   0,   0,   0,
	255, 255, 255, 255,   0,   0,
	0,   0, 115,  99,  97, 108,
	101,  66, 105,  97, 115,   0,
	102, 108, 111,  97, 116,  52,
	0, 171, 171, 171,   1,   0,
	3,   0,   1,   0,   4,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	222,   0,   0,   0,  84, 101,
	120, 116, 117, 114, 101,  83,
	105, 122, 101,   0, 102, 108,
	111,  97, 116,  50,   0, 171,
	1,   0,   3,   0,   1,   0,
	2,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,  24,   1,   0,   0,
	77, 105,  99, 114, 111, 115,
	111, 102, 116,  32,  40,  82,
	41,  32,  72,  76,  83,  76,
	32,  83, 104,  97, 100, 101,
	114,  32,  67, 111, 109, 112,
	105, 108, 101, 114,  32,  49,
	48,  46,  49,   0,  73,  83,
	71,  78,  76,   0,   0,   0,
	2,   0,   0,   0,   8,   0,
	0,   0,  56,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	0,   0,   0,   0,   3,   3,
	0,   0,  65,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	1,   0,   0,   0,   3,   3,
	0,   0,  80, 111, 115, 105,
	116, 105, 111, 110,   0,  84,
	69,  88,  67,  79,  79,  82,
	68,   0, 171, 171,  79,  83,
	71,  78, 104,   0,   0,   0,
	3,   0,   0,   0,   8,   0,
	0,   0,  80,   0,   0,   0,
	0,   0,   0,   0,   1,   0,
	0,   0,   3,   0,   0,   0,
	0,   0,   0,   0,  15,   0,
	0,   0,  92,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	1,   0,   0,   0,   3,  12,
	0,   0,  92,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	2,   0,   0,   0,  15,  12,
	0,   0,  83,  86,  95,  80,
	111, 115, 105, 116, 105, 111,
	110,   0,  84,  69,  88,  67,
	79,  79,  82,  68,   0, 171,
	171, 171,  83,  72,  69,  88,
	224,   0,   0,   0,  80,   0,
	1,   0,  56,   0,   0,   0,
	106,   8,   0,   1,  89,   0,
	0,   4,  70, 142,  32,   0,
	0,   0,   0,   0,   2,   0,
	0,   0,  95,   0,   0,   3,
	50,  16,  16,   0,   0,   0,
	0,   0,  95,   0,   0,   3,
	50,  16,  16,   0,   1,   0,
	0,   0, 103,   0,   0,   4,
	242,  32,  16,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	101,   0,   0,   3,  50,  32,
	16,   0,   1,   0,   0,   0,
	101,   0,   0,   3,  50,  32,
	16,   0,   2,   0,   0,   0,
	50,   0,   0,  11,  50,  32,
	16,   0,   0,   0,   0,   0,
	70,  16,  16,   0,   0,   0,
	0,   0,  70, 128,  32,   0,
	0,   0,   0,   0,   0,   0,
	0,   0, 230, 138,  32,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,  54,   0,   0,   8,
	194,  32,  16,   0,   0,   0,
	0,   0,   2,  64,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0, 128,  63,  54,   0,
	0,   5,  50,  32,  16,   0,
	1,   0,   0,   0,  70,  16,
	16,   0,   1,   0,   0,   0,
	56,   0,   0,   8,  50,  32,
	16,   0,   2,   0,   0,   0,
	70,  16,  16,   0,   1,   0,
	0,   0,  70, 128,  32,   0,
	0,   0,   0,   0,   1,   0,
	0,   0,  62,   0,   0,   1,
	83,  84,  65,  84, 148,   0,
	0,   0,   5,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   5,   0,   0,   0,
	2,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	2,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0
};

const unsigned char d3d12_builtin_textured_frag[] =
{
	68,  88,  66,  67, 183, 189,
	46,  71, 222, 106, 133, 147,
	80, 191,  51,  93,  77, 103,
	70,  46,   1,   0,   0,   0,
	196,   3,   0,   0,   5,   0,
	0,   0,  52,   0,   0,   0,
	172,   1,   0,   0,  28,   2,
	0,   0,  80,   2,   0,   0,
	40,   3,   0,   0,  82,  68,
	69,  70, 112,   1,   0,   0,
	1,   0,   0,   0, 212,   0,
	0,   0,   3,   0,   0,   0,
	60,   0,   0,   0,   1,   5,
	255, 255,   0, 129,  32,   0,
	72,   1,   0,   0,  19,  19,
	68,  37,  60,   0,   0,   0,
	24,   0,   0,   0,  40,   0,
	0,   0,  40,   0,   0,   0,
	36,   0,   0,   0,  12,   0,
	0,   0,   0,   0,   0,   0,
	180,   0,   0,   0,   3,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0, 190,   0,
	0,   0,   2,   0,   0,   0,
	5,   0,   0,   0,   4,   0,
	0,   0, 255, 255, 255, 255,
	2,   0,   0,   0,   1,   0,
	0,   0,  12,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0, 196,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   1,   0,
	0,   0,   1,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	117,  83,  97, 109, 112, 108,
	101, 114,  48,   0, 117,  84,
	101, 120,  48,   0, 117, 110,
	105, 102, 111, 114, 109,  66,
	108, 111,  99, 107,  80,  83,
	0, 171, 196,   0,   0,   0,
	1,   0,   0,   0, 236,   0,
	0,   0,  16,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,  20,   1,   0,   0,
	0,   0,   0,   0,  16,   0,
	0,   0,   2,   0,   0,   0,
	36,   1,   0,   0,   0,   0,
	0,   0, 255, 255, 255, 255,
	0,   0,   0,   0, 255, 255,
	255, 255,   0,   0,   0,   0,
	99, 111, 108, 111, 114,   0,
	102, 108, 111,  97, 116,  52,
	0, 171, 171, 171,   1,   0,
	3,   0,   1,   0,   4,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	26,   1,   0,   0,  77, 105,
	99, 114, 111, 115, 111, 102,
	116,  32,  40,  82,  41,  32,
	72,  76,  83,  76,  32,  83,
	104,  97, 100, 101, 114,  32,
	67, 111, 109, 112, 105, 108,
	101, 114,  32,  49,  48,  46,
	49,   0,  73,  83,  71,  78,
	104,   0,   0,   0,   3,   0,
	0,   0,   8,   0,   0,   0,
	80,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	3,   0,   0,   0,   0,   0,
	0,   0,  15,   0,   0,   0,
	92,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	3,   0,   0,   0,   1,   0,
	0,   0,   3,   3,   0,   0,
	92,   0,   0,   0,   1,   0,
	0,   0,   0,   0,   0,   0,
	3,   0,   0,   0,   2,   0,
	0,   0,  15,   0,   0,   0,
	83,  86,  95,  80, 111, 115,
	105, 116, 105, 111, 110,   0,
	84,  69,  88,  67,  79,  79,
	82,  68,   0, 171, 171, 171,
	79,  83,  71,  78,  44,   0,
	0,   0,   1,   0,   0,   0,
	8,   0,   0,   0,  32,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   3,   0,
	0,   0,   0,   0,   0,   0,
	15,   0,   0,   0,  83,  86,
	95,  84,  97, 114, 103, 101,
	116,   0, 171, 171,  83,  72,
	69,  88, 208,   0,   0,   0,
	81,   0,   0,   0,  52,   0,
	0,   0, 106,   8,   8,   1,
	89,   0,   0,   7,  70, 142,
	48,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   1,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,  90,   0,
	0,   6,  70, 110,  48,   0,
	0,   0,   0,   0,   3,   0,
	0,   0,   3,   0,   0,   0,
	0,   0,   0,   0,  88,  24,
	0,   7,  70, 126,  48,   0,
	0,   0,   0,   0,   2,   0,
	0,   0,   2,   0,   0,   0,
	85,  85,   0,   0,   0,   0,
	0,   0,  98,  16,   0,   3,
	50,  16,  16,   0,   1,   0,
	0,   0, 101,   0,   0,   3,
	242,  32,  16,   0,   0,   0,
	0,   0, 104,   0,   0,   2,
	1,   0,   0,   0,  69,   0,
	0,  11, 242,   0,  16,   0,
	0,   0,   0,   0,  70,  16,
	16,   0,   1,   0,   0,   0,
	70, 126,  32,   0,   0,   0,
	0,   0,   2,   0,   0,   0,
	0,  96,  32,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	56,   0,   0,   9, 242,  32,
	16,   0,   0,   0,   0,   0,
	70,  14,  16,   0,   0,   0,
	0,   0,  70, 142,  48,   0,
	0,   0,   0,   0,   1,   0,
	0,   0,   0,   0,   0,   0,
	62,   0,   0,   1,  83,  84,
	65,  84, 148,   0,   0,   0,
	3,   0,   0,   0,   1,   0,
	0,   0,   0,   0,   0,   0,
	2,   0,   0,   0,   1,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   1,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0
};
/************************************************************************/
/************************************************************************/
/*
struct PsIn
{
	float4 position: SV_Position;
	float2 texCoord: TEXCOORD0;
	float4 ScaledTexCoord: TEXCOORD1;
};

Texture2D uTex0: register(t2);
SamplerState uSampler0: register(s3);

cbuffer uniformBlockPS : register(b1)
{
	float4 color;
};

float4 PSMain(PsIn In) : SV_Target
{
    return float4(1.0, 1.0, 1.0, uTex0.Sample(uSampler0, In.texCoord).r) * color;
};
)";
*/
const unsigned char d3d12_builtin_textured_red_alpha_frag[] =
{
	68,  88,  66,  67,  96,  27,
	250, 114,  10, 245, 239,  37,
	54,  56,  94,   4,  17, 183,
	234,  82,   1,   0,   0,   0,
	152,   3,   0,   0,   5,   0,
	0,   0,  52,   0,   0,   0,
	148,   1,   0,   0,   4,   2,
	0,   0,  56,   2,   0,   0,
	252,   2,   0,   0,  82,  68,
	69,  70,  88,   1,   0,   0,
	1,   0,   0,   0, 188,   0,
	0,   0,   3,   0,   0,   0,
	60,   0,   0,   0,   0,   5,
	255, 255,   0, 129,  32,   0,
	48,   1,   0,   0,  82,  68,
	49,  49,  60,   0,   0,   0,
	24,   0,   0,   0,  32,   0,
	0,   0,  40,   0,   0,   0,
	36,   0,   0,   0,  12,   0,
	0,   0,   0,   0,   0,   0,
	156,   0,   0,   0,   3,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   3,   0,   0,   0,
	1,   0,   0,   0,   1,   0,
	0,   0, 166,   0,   0,   0,
	2,   0,   0,   0,   5,   0,
	0,   0,   4,   0,   0,   0,
	255, 255, 255, 255,   2,   0,
	0,   0,   1,   0,   0,   0,
	13,   0,   0,   0, 172,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   1,   0,
	0,   0,   1,   0,   0,   0,
	117,  83,  97, 109, 112, 108,
	101, 114,  48,   0, 117,  84,
	101, 120,  48,   0, 117, 110,
	105, 102, 111, 114, 109,  66,
	108, 111,  99, 107,  80,  83,
	0, 171, 172,   0,   0,   0,
	1,   0,   0,   0, 212,   0,
	0,   0,  16,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0, 252,   0,   0,   0,
	0,   0,   0,   0,  16,   0,
	0,   0,   2,   0,   0,   0,
	12,   1,   0,   0,   0,   0,
	0,   0, 255, 255, 255, 255,
	0,   0,   0,   0, 255, 255,
	255, 255,   0,   0,   0,   0,
	99, 111, 108, 111, 114,   0,
	102, 108, 111,  97, 116,  52,
	0, 171, 171, 171,   1,   0,
	3,   0,   1,   0,   4,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	2,   1,   0,   0,  77, 105,
	99, 114, 111, 115, 111, 102,
	116,  32,  40,  82,  41,  32,
	72,  76,  83,  76,  32,  83,
	104,  97, 100, 101, 114,  32,
	67, 111, 109, 112, 105, 108,
	101, 114,  32,  49,  48,  46,
	49,   0,  73,  83,  71,  78,
	104,   0,   0,   0,   3,   0,
	0,   0,   8,   0,   0,   0,
	80,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	3,   0,   0,   0,   0,   0,
	0,   0,  15,   0,   0,   0,
	92,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	3,   0,   0,   0,   1,   0,
	0,   0,   3,   3,   0,   0,
	92,   0,   0,   0,   1,   0,
	0,   0,   0,   0,   0,   0,
	3,   0,   0,   0,   2,   0,
	0,   0,  15,   0,   0,   0,
	83,  86,  95,  80, 111, 115,
	105, 116, 105, 111, 110,   0,
	84,  69,  88,  67,  79,  79,
	82,  68,   0, 171, 171, 171,
	79,  83,  71,  78,  44,   0,
	0,   0,   1,   0,   0,   0,
	8,   0,   0,   0,  32,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   3,   0,
	0,   0,   0,   0,   0,   0,
	15,   0,   0,   0,  83,  86,
	95,  84,  97, 114, 103, 101,
	116,   0, 171, 171,  83,  72,
	69,  88, 188,   0,   0,   0,
	80,   0,   0,   0,  47,   0,
	0,   0, 106,   8,   0,   1,
	89,   0,   0,   4,  70, 142,
	32,   0,   1,   0,   0,   0,
	1,   0,   0,   0,  90,   0,
	0,   3,   0,  96,  16,   0,
	3,   0,   0,   0,  88,  24,
	0,   4,   0, 112,  16,   0,
	2,   0,   0,   0,  85,  85,
	0,   0,  98,  16,   0,   3,
	50,  16,  16,   0,   1,   0,
	0,   0, 101,   0,   0,   3,
	242,  32,  16,   0,   0,   0,
	0,   0, 104,   0,   0,   2,
	1,   0,   0,   0,  69,   0,
	0, 139, 194,   0,   0, 128,
	67,  85,  21,   0,  34,   0,
	16,   0,   0,   0,   0,   0,
	70,  16,  16,   0,   1,   0,
	0,   0,  22, 126,  16,   0,
	2,   0,   0,   0,   0,  96,
	16,   0,   3,   0,   0,   0,
	54,   0,   0,   5,  18,   0,
	16,   0,   0,   0,   0,   0,
	1,  64,   0,   0,   0,   0,
	128,  63,  56,   0,   0,   8,
	242,  32,  16,   0,   0,   0,
	0,   0,   6,   4,  16,   0,
	0,   0,   0,   0,  70, 142,
	32,   0,   1,   0,   0,   0,
	0,   0,   0,   0,  62,   0,
	0,   1,  83,  84,  65,  84,
	148,   0,   0,   0,   4,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,   2,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	1,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   1,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0,   0,   0,   0,   0,
	0,   0
};

/*
#version 450 core

layout(location = 0) in vec2 position;

layout (set=0, binding=0) uniform uniformBlockVS
{
uniform vec4 scaleBias;
};

void main( void )
{
gl_Position = vec4 (position, 0.0f, 1.0f);
gl_Position.xy = gl_Position.xy * scaleBias.xy + scaleBias.zw;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t vk_builtin_plain_vert[] = {
	0x07230203,0x00010000,0x00080002,0x0000002d,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x00000012,0x00030003,
	0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00060005,0x0000000b,
	0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x0000000b,0x00000000,0x505f6c67,
	0x7469736f,0x006e6f69,0x00070006,0x0000000b,0x00000001,0x505f6c67,0x746e696f,0x657a6953,
	0x00000000,0x00070006,0x0000000b,0x00000002,0x435f6c67,0x4470696c,0x61747369,0x0065636e,
	0x00070006,0x0000000b,0x00000003,0x435f6c67,0x446c6c75,0x61747369,0x0065636e,0x00030005,
	0x0000000d,0x00000000,0x00050005,0x00000012,0x69736f70,0x6e6f6974,0x00000000,0x00060005,
	0x0000001e,0x66696e75,0x426d726f,0x6b636f6c,0x00005356,0x00060006,0x0000001e,0x00000000,
	0x6c616373,0x61694265,0x00000073,0x00030005,0x00000020,0x00000000,0x00050048,0x0000000b,
	0x00000000,0x0000000b,0x00000000,0x00050048,0x0000000b,0x00000001,0x0000000b,0x00000001,
	0x00050048,0x0000000b,0x00000002,0x0000000b,0x00000003,0x00050048,0x0000000b,0x00000003,
	0x0000000b,0x00000004,0x00030047,0x0000000b,0x00000002,0x00040047,0x00000012,0x0000001e,
	0x00000000,0x00050048,0x0000001e,0x00000000,0x00000023,0x00000000,0x00030047,0x0000001e,
	0x00000002,0x00040047,0x00000020,0x00000022,0x00000000,0x00040047,0x00000020,0x00000021,
	0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,0x00000008,0x00000020,
	0x00000000,0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,0x0000000a,0x00000006,
	0x00000009,0x0006001e,0x0000000b,0x00000007,0x00000006,0x0000000a,0x0000000a,0x00040020,
	0x0000000c,0x00000003,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000003,0x00040015,
	0x0000000e,0x00000020,0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040017,
	0x00000010,0x00000006,0x00000002,0x00040020,0x00000011,0x00000001,0x00000010,0x0004003b,
	0x00000011,0x00000012,0x00000001,0x0004002b,0x00000006,0x00000014,0x00000000,0x0004002b,
	0x00000006,0x00000015,0x3f800000,0x00040020,0x00000019,0x00000003,0x00000007,0x0003001e,
	0x0000001e,0x00000007,0x00040020,0x0000001f,0x00000002,0x0000001e,0x0004003b,0x0000001f,
	0x00000020,0x00000002,0x00040020,0x00000021,0x00000002,0x00000007,0x00050036,0x00000002,
	0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x00000010,0x00000013,
	0x00000012,0x00050051,0x00000006,0x00000016,0x00000013,0x00000000,0x00050051,0x00000006,
	0x00000017,0x00000013,0x00000001,0x00070050,0x00000007,0x00000018,0x00000016,0x00000017,
	0x00000014,0x00000015,0x00050041,0x00000019,0x0000001a,0x0000000d,0x0000000f,0x0003003e,
	0x0000001a,0x00000018,0x00050041,0x00000019,0x0000001b,0x0000000d,0x0000000f,0x0004003d,
	0x00000007,0x0000001c,0x0000001b,0x0007004f,0x00000010,0x0000001d,0x0000001c,0x0000001c,
	0x00000000,0x00000001,0x00050041,0x00000021,0x00000022,0x00000020,0x0000000f,0x0004003d,
	0x00000007,0x00000023,0x00000022,0x0007004f,0x00000010,0x00000024,0x00000023,0x00000023,
	0x00000000,0x00000001,0x00050085,0x00000010,0x00000025,0x0000001d,0x00000024,0x00050041,
	0x00000021,0x00000026,0x00000020,0x0000000f,0x0004003d,0x00000007,0x00000027,0x00000026,
	0x0007004f,0x00000010,0x00000028,0x00000027,0x00000027,0x00000002,0x00000003,0x00050081,
	0x00000010,0x00000029,0x00000025,0x00000028,0x00050041,0x00000019,0x0000002a,0x0000000d,
	0x0000000f,0x0004003d,0x00000007,0x0000002b,0x0000002a,0x0009004f,0x00000007,0x0000002c,
	0x0000002b,0x00000029,0x00000004,0x00000005,0x00000002,0x00000003,0x0003003e,0x0000002a,
	0x0000002c,0x000100fd,0x00010038
};

/*
#version 450 core

layout (location = 0) out vec4 oColor;

layout (set=0, binding=1) uniform uniformBlockPS
{
uniform vec4 color;
};

void main( void )
{
oColor = color;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t vk_builtin_plain_frag[] = {
	0x07230203,0x00010000,0x00080002,0x00000012,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0006000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00030010,0x00000004,
	0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,
	0x00040005,0x00000009,0x6c6f436f,0x0000726f,0x00060005,0x0000000a,0x66696e75,0x426d726f,
	0x6b636f6c,0x00005350,0x00050006,0x0000000a,0x00000000,0x6f6c6f63,0x00000072,0x00030005,
	0x0000000c,0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00050048,0x0000000a,
	0x00000000,0x00000023,0x00000000,0x00030047,0x0000000a,0x00000002,0x00040047,0x0000000c,
	0x00000022,0x00000000,0x00040047,0x0000000c,0x00000021,0x00000001,0x00020013,0x00000002,
	0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,
	0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,0x00000008,
	0x00000009,0x00000003,0x0003001e,0x0000000a,0x00000007,0x00040020,0x0000000b,0x00000002,
	0x0000000a,0x0004003b,0x0000000b,0x0000000c,0x00000002,0x00040015,0x0000000d,0x00000020,
	0x00000001,0x0004002b,0x0000000d,0x0000000e,0x00000000,0x00040020,0x0000000f,0x00000002,
	0x00000007,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,
	0x00050041,0x0000000f,0x00000010,0x0000000c,0x0000000e,0x0004003d,0x00000007,0x00000011,
	0x00000010,0x0003003e,0x00000009,0x00000011,0x000100fd,0x00010038
};
/************************************************************************/
/************************************************************************/
/*
#version 450 core

layout (location = 0) in vec2 position;
layout (location = 1) in vec2 texCoord;

layout (set=0, binding=0) uniform uniformBlockVS
{
uniform vec4 scaleBias;
uniform vec2 TextureSize;
};

layout (location=0) out vec2 texcoord;

void main( void )
{
gl_Position = vec4 (position, 0.0f, 1.0f);
gl_Position.xy = gl_Position.xy * scaleBias.xy + scaleBias.zw;
texcoord = texCoord;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t vk_builtin_textured_vert[] = {
	0x07230203,0x00010000,0x00080002,0x00000031,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x00000012,0x0000002e,
	0x0000002f,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,
	0x00060005,0x0000000b,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x0000000b,
	0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00070006,0x0000000b,0x00000001,0x505f6c67,
	0x746e696f,0x657a6953,0x00000000,0x00070006,0x0000000b,0x00000002,0x435f6c67,0x4470696c,
	0x61747369,0x0065636e,0x00070006,0x0000000b,0x00000003,0x435f6c67,0x446c6c75,0x61747369,
	0x0065636e,0x00030005,0x0000000d,0x00000000,0x00050005,0x00000012,0x69736f70,0x6e6f6974,
	0x00000000,0x00060005,0x0000001e,0x66696e75,0x426d726f,0x6b636f6c,0x00005356,0x00060006,
	0x0000001e,0x00000000,0x6c616373,0x61694265,0x00000073,0x00060006,0x0000001e,0x00000001,
	0x74786554,0x53657275,0x00657a69,0x00030005,0x00000020,0x00000000,0x00050005,0x0000002e,
	0x63786574,0x64726f6f,0x00000000,0x00050005,0x0000002f,0x43786574,0x64726f6f,0x00000000,
	0x00050048,0x0000000b,0x00000000,0x0000000b,0x00000000,0x00050048,0x0000000b,0x00000001,
	0x0000000b,0x00000001,0x00050048,0x0000000b,0x00000002,0x0000000b,0x00000003,0x00050048,
	0x0000000b,0x00000003,0x0000000b,0x00000004,0x00030047,0x0000000b,0x00000002,0x00040047,
	0x00000012,0x0000001e,0x00000000,0x00050048,0x0000001e,0x00000000,0x00000023,0x00000000,
	0x00050048,0x0000001e,0x00000001,0x00000023,0x00000010,0x00030047,0x0000001e,0x00000002,
	0x00040047,0x00000020,0x00000022,0x00000000,0x00040047,0x00000020,0x00000021,0x00000000,
	0x00040047,0x0000002e,0x0000001e,0x00000000,0x00040047,0x0000002f,0x0000001e,0x00000001,
	0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
	0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,0x00000008,0x00000020,0x00000000,
	0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,0x0000000a,0x00000006,0x00000009,
	0x0006001e,0x0000000b,0x00000007,0x00000006,0x0000000a,0x0000000a,0x00040020,0x0000000c,
	0x00000003,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000003,0x00040015,0x0000000e,
	0x00000020,0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040017,0x00000010,
	0x00000006,0x00000002,0x00040020,0x00000011,0x00000001,0x00000010,0x0004003b,0x00000011,
	0x00000012,0x00000001,0x0004002b,0x00000006,0x00000014,0x00000000,0x0004002b,0x00000006,
	0x00000015,0x3f800000,0x00040020,0x00000019,0x00000003,0x00000007,0x0004001e,0x0000001e,
	0x00000007,0x00000010,0x00040020,0x0000001f,0x00000002,0x0000001e,0x0004003b,0x0000001f,
	0x00000020,0x00000002,0x00040020,0x00000021,0x00000002,0x00000007,0x00040020,0x0000002d,
	0x00000003,0x00000010,0x0004003b,0x0000002d,0x0000002e,0x00000003,0x0004003b,0x00000011,
	0x0000002f,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,
	0x00000005,0x0004003d,0x00000010,0x00000013,0x00000012,0x00050051,0x00000006,0x00000016,
	0x00000013,0x00000000,0x00050051,0x00000006,0x00000017,0x00000013,0x00000001,0x00070050,
	0x00000007,0x00000018,0x00000016,0x00000017,0x00000014,0x00000015,0x00050041,0x00000019,
	0x0000001a,0x0000000d,0x0000000f,0x0003003e,0x0000001a,0x00000018,0x00050041,0x00000019,
	0x0000001b,0x0000000d,0x0000000f,0x0004003d,0x00000007,0x0000001c,0x0000001b,0x0007004f,
	0x00000010,0x0000001d,0x0000001c,0x0000001c,0x00000000,0x00000001,0x00050041,0x00000021,
	0x00000022,0x00000020,0x0000000f,0x0004003d,0x00000007,0x00000023,0x00000022,0x0007004f,
	0x00000010,0x00000024,0x00000023,0x00000023,0x00000000,0x00000001,0x00050085,0x00000010,
	0x00000025,0x0000001d,0x00000024,0x00050041,0x00000021,0x00000026,0x00000020,0x0000000f,
	0x0004003d,0x00000007,0x00000027,0x00000026,0x0007004f,0x00000010,0x00000028,0x00000027,
	0x00000027,0x00000002,0x00000003,0x00050081,0x00000010,0x00000029,0x00000025,0x00000028,
	0x00050041,0x00000019,0x0000002a,0x0000000d,0x0000000f,0x0004003d,0x00000007,0x0000002b,
	0x0000002a,0x0009004f,0x00000007,0x0000002c,0x0000002b,0x00000029,0x00000004,0x00000005,
	0x00000002,0x00000003,0x0003003e,0x0000002a,0x0000002c,0x0004003d,0x00000010,0x00000030,
	0x0000002f,0x0003003e,0x0000002e,0x00000030,0x000100fd,0x00010038
};

/*
#version 450 core

layout (location = 0) in vec2 texcoord;

layout (location = 0) out vec4 oColor;

layout (set=0, binding=1) uniform uniformBlockPS
{
uniform vec4 color;
};

layout (set=0, binding=2) uniform texture2D uTex0;
layout (set=0, binding=3) uniform sampler uSampler0;

void main(void)
{
oColor = texture(sampler2D(uTex0, uSampler0), texcoord) * color;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t vk_builtin_textured_frag[] = {
	0x07230203,0x00010000,0x00080006,0x00000022,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00000016,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6c6f436f,0x0000726f,0x00040005,0x0000000c,0x78655475,
	0x00000030,0x00050005,0x00000010,0x6d615375,0x72656c70,0x00000030,0x00050005,0x00000016,
	0x63786574,0x64726f6f,0x00000000,0x00060005,0x00000019,0x66696e75,0x426d726f,0x6b636f6c,
	0x00005350,0x00050006,0x00000019,0x00000000,0x6f6c6f63,0x00000072,0x00030005,0x0000001b,
	0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000c,0x00000022,
	0x00000000,0x00040047,0x0000000c,0x00000021,0x00000002,0x00040047,0x00000010,0x00000022,
	0x00000000,0x00040047,0x00000010,0x00000021,0x00000003,0x00040047,0x00000016,0x0000001e,
	0x00000000,0x00050048,0x00000019,0x00000000,0x00000023,0x00000000,0x00030047,0x00000019,
	0x00000002,0x00040047,0x0000001b,0x00000022,0x00000000,0x00040047,0x0000001b,0x00000021,
	0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00090019,0x0000000a,0x00000006,
	0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x00040020,0x0000000b,
	0x00000000,0x0000000a,0x0004003b,0x0000000b,0x0000000c,0x00000000,0x0002001a,0x0000000e,
	0x00040020,0x0000000f,0x00000000,0x0000000e,0x0004003b,0x0000000f,0x00000010,0x00000000,
	0x0003001b,0x00000012,0x0000000a,0x00040017,0x00000014,0x00000006,0x00000002,0x00040020,
	0x00000015,0x00000001,0x00000014,0x0004003b,0x00000015,0x00000016,0x00000001,0x0003001e,
	0x00000019,0x00000007,0x00040020,0x0000001a,0x00000002,0x00000019,0x0004003b,0x0000001a,
	0x0000001b,0x00000002,0x00040015,0x0000001c,0x00000020,0x00000001,0x0004002b,0x0000001c,
	0x0000001d,0x00000000,0x00040020,0x0000001e,0x00000002,0x00000007,0x00050036,0x00000002,
	0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000a,0x0000000d,
	0x0000000c,0x0004003d,0x0000000e,0x00000011,0x00000010,0x00050056,0x00000012,0x00000013,
	0x0000000d,0x00000011,0x0004003d,0x00000014,0x00000017,0x00000016,0x00050057,0x00000007,
	0x00000018,0x00000013,0x00000017,0x00050041,0x0000001e,0x0000001f,0x0000001b,0x0000001d,
	0x0004003d,0x00000007,0x00000020,0x0000001f,0x00050085,0x00000007,0x00000021,0x00000018,
	0x00000020,0x0003003e,0x00000009,0x00000021,0x000100fd,0x00010038
};
/************************************************************************/
/************************************************************************/
/*
#version 450 core

layout (location = 0) in vec2 texcoord;

layout (location = 0) out vec4 oColor;

layout (set=0, binding=1) uniform uniformBlockPS
{
uniform vec4 color;
};

layout (set=0, binding=2) uniform texture2D uTex0;
layout (set=0, binding=3) uniform sampler uSampler0;

void main(void)
{
oColor = vec4(1.0, 1.0, 1.0, texture(sampler2D(uTex0, uSampler0), texcoord)) * color;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t vk_builtin_textured_red_alpha_frag[] = {
	0x07230203,0x00010000,0x00080004,0x0000002a,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000015,0x0000001d,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00030005,0x00000008,0x00000061,0x00040005,0x0000000b,0x78655475,0x00000030,
	0x00050005,0x0000000f,0x6d615375,0x72656c70,0x00000030,0x00050005,0x00000015,0x63786574,
	0x64726f6f,0x00000000,0x00040005,0x0000001d,0x6c6f436f,0x0000726f,0x00060005,0x00000021,
	0x66696e75,0x426d726f,0x6b636f6c,0x00005350,0x00050006,0x00000021,0x00000000,0x6f6c6f63,
	0x00000072,0x00030005,0x00000023,0x00000000,0x00040047,0x0000000b,0x00000022,0x00000000,
	0x00040047,0x0000000b,0x00000021,0x00000002,0x00040047,0x0000000f,0x00000022,0x00000000,
	0x00040047,0x0000000f,0x00000021,0x00000003,0x00040047,0x00000015,0x0000001e,0x00000000,
	0x00040047,0x0000001d,0x0000001e,0x00000000,0x00050048,0x00000021,0x00000000,0x00000023,
	0x00000000,0x00030047,0x00000021,0x00000002,0x00040047,0x00000023,0x00000022,0x00000000,
	0x00040047,0x00000023,0x00000021,0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,
	0x00000002,0x00030016,0x00000006,0x00000020,0x00040020,0x00000007,0x00000007,0x00000006,
	0x00090019,0x00000009,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,
	0x00000000,0x00040020,0x0000000a,0x00000000,0x00000009,0x0004003b,0x0000000a,0x0000000b,
	0x00000000,0x0002001a,0x0000000d,0x00040020,0x0000000e,0x00000000,0x0000000d,0x0004003b,
	0x0000000e,0x0000000f,0x00000000,0x0003001b,0x00000011,0x00000009,0x00040017,0x00000013,
	0x00000006,0x00000002,0x00040020,0x00000014,0x00000001,0x00000013,0x0004003b,0x00000014,
	0x00000015,0x00000001,0x00040017,0x00000017,0x00000006,0x00000004,0x00040015,0x00000019,
	0x00000020,0x00000000,0x0004002b,0x00000019,0x0000001a,0x00000000,0x00040020,0x0000001c,
	0x00000003,0x00000017,0x0004003b,0x0000001c,0x0000001d,0x00000003,0x0004002b,0x00000006,
	0x0000001e,0x3f800000,0x0003001e,0x00000021,0x00000017,0x00040020,0x00000022,0x00000002,
	0x00000021,0x0004003b,0x00000022,0x00000023,0x00000002,0x00040015,0x00000024,0x00000020,
	0x00000001,0x0004002b,0x00000024,0x00000025,0x00000000,0x00040020,0x00000026,0x00000002,
	0x00000017,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,
	0x0004003b,0x00000007,0x00000008,0x00000007,0x0004003d,0x00000009,0x0000000c,0x0000000b,
	0x0004003d,0x0000000d,0x00000010,0x0000000f,0x00050056,0x00000011,0x00000012,0x0000000c,
	0x00000010,0x0004003d,0x00000013,0x00000016,0x00000015,0x00050057,0x00000017,0x00000018,
	0x00000012,0x00000016,0x00050051,0x00000006,0x0000001b,0x00000018,0x00000000,0x0003003e,
	0x00000008,0x0000001b,0x0004003d,0x00000006,0x0000001f,0x00000008,0x00070050,0x00000017,
	0x00000020,0x0000001e,0x0000001e,0x0000001e,0x0000001f,0x00050041,0x00000026,0x00000027,
	0x00000023,0x00000025,0x0004003d,0x00000017,0x00000028,0x00000027,0x00050085,0x00000017,
	0x00000029,0x00000020,0x00000028,0x0003003e,0x0000001d,0x00000029,0x000100fd,0x00010038
};

const char* mtl_builtin_plain = R"(
#include <metal_stdlib>
using namespace metal;

struct UniformBlock0
{
	float4 scaleBias;
};

struct VSIn
{
   float4 position [[attribute(0)]];
};

struct VSOut
{
   float4 position [[position]];
};

vertex VSOut VSMain(VSIn vsin [[stage_in]], constant UniformBlock0& uniformBlockVS [[buffer(1)]]){
 VSOut vsout;
 vsout.position = float4 (vsin.position.xy * uniformBlockVS.scaleBias.xy + uniformBlockVS.scaleBias.zw, 0.0f, 1.0f);
 return vsout;
};

struct UniformBlock1
{
	float4 color;
};

fragment float4 PSMain( constant UniformBlock1& uniformBlockPS [[buffer(0)]]) {
  return uniformBlockPS.color;
}
)";

const char* mtl_builtin_textured = R"(
#include <metal_stdlib>
using namespace metal;

struct VsIn {
 float2 position [[attribute(0)]];
 float2 texCoord [[attribute(1)]];
};

struct PsIn {
 float4 position [[position]];
 float2 texCoord;
 float4 ScaledTexCoord;
};

struct UniformBlock0
{
	float4 scaleBias;
	float2 TextureSize;
};

vertex PsIn VSMain(VsIn In [[stage_in]], constant UniformBlock0& uniformBlockVS [[buffer(1)]]){
	PsIn Out;
	Out.position = float4 (In.position, 0.0f, 1.0f);
	Out.ScaledTexCoord.xy = In.texCoord * uniformBlockVS.TextureSize;
	Out.position.xy = Out.position.xy * uniformBlockVS.scaleBias.xy + uniformBlockVS.scaleBias.zw;
	Out.texCoord = In.texCoord;
	return Out;
}

struct UniformBlock1
{
	float4 color;
};

fragment float4 PSMain(PsIn In [[stage_in]],
                       texture2d<float,access::sample> uTex0 [[texture(0)]],
                       sampler uSampler0 [[sampler(0)]],
                       constant UniformBlock1& uniformBlockPS [[buffer(1)]])
{
	return uTex0.sample(uSampler0, In.texCoord) * uniformBlockPS.color;
};
)";

const char* mtl_builtin_textured_red_alpha = R"(
#include <metal_stdlib>
using namespace metal;

struct PsIn {
	float4 position [[position]];
	float2 texCoord;
	float4 ScaledTexCoord;
};

struct UniformBlock0
{
	float4 color;
};

fragment float4 PSMain(PsIn In [[stage_in]], texture2d<float,access::sample> uTex0 [[texture(0)]], sampler uSampler0 [[sampler(0)]], constant UniformBlock0& uniformBlockPS [[buffer(1)]]) {
	return float4(1.0, 1.0, 1.0, uTex0.sample(uSampler0, In.texCoord).r) * uniformBlockPS.color;
};
)";
