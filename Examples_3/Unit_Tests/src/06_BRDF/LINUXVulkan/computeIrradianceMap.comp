/*
* Copyright (c) 2018 Confetti Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#version 450 core

const float Pi = 3.14159265359;
const float SampleDelta = 0.025;
layout(set = 0, binding = 0) uniform textureCube srcTexture;

layout(std430, set = 0, binding = 1) buffer dstBuffer
{
	vec4 storeVal[];
};

layout(set = 0, binding = 2) uniform sampler skyboxSampler;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

vec4 computeIrradiance(vec3 N)
{
	vec4 irradiance = vec4(0.0);

	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = cross(up, N);
	up = cross(N, right);

	float nrSamples = 0.0;

	for (float phi = 0.0; phi < 2.0 * Pi; phi += SampleDelta)
	{
		for (float theta = 0.0; theta < 0.5 * Pi; theta += SampleDelta)
		{
			// spherical to cartesian (in tangent space)
			vec3 tangentSample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

			// tangent space to world
			vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;


			vec4 sampledValue = texture(samplerCube(srcTexture, skyboxSampler), sampleVec);

			irradiance += vec4(sampledValue.rgb * cos(theta) * sin(theta), sampledValue.a);
			nrSamples++;

		}
	}

	return Pi * irradiance * (1.0 / float(nrSamples));
}

void main()
{
	uvec3 threadPos = gl_GlobalInvocationID;

	uint pixelOffset = 0;

	for (uint i = 0; i < threadPos.z; ++i)
	{
		pixelOffset += 32 * 32;
	}

	vec2 texcoords = vec2(float(threadPos.x + 0.5) / 32.0f, float(threadPos.y + 0.5) / 32.0f);

	vec3 sphereDir;

	if (threadPos.z <= 0) {
		sphereDir = normalize(vec3(0.5, -(texcoords.y - 0.5), -(texcoords.x - 0.5)));
	}
	else if (threadPos.z <= 1) {
		sphereDir = normalize(vec3(-0.5, -(texcoords.y - 0.5), texcoords.x - 0.5));
	}
	else if (threadPos.z <= 2) {
		sphereDir = normalize(vec3(texcoords.x - 0.5, 0.5, texcoords.y - 0.5));
	}
	else if (threadPos.z <= 3) {
		sphereDir = normalize(vec3(texcoords.x - 0.5, -0.5, -(texcoords.y - 0.5)));
	}
	else if (threadPos.z <= 4) {
		sphereDir = normalize(vec3(texcoords.x - 0.5, -(texcoords.y - 0.5), 0.5));
	}
	else if (threadPos.z <= 5) {
		sphereDir = normalize(vec3(-(texcoords.x - 0.5), -(texcoords.y - 0.5), -0.5));
	}

	uint pixelId = pixelOffset + threadPos.y * 32 + threadPos.x;
	
	vec4 irradiance = computeIrradiance(sphereDir);
	storeVal[pixelId] = irradiance;
}